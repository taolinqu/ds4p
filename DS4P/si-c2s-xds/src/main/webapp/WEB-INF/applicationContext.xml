<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	   		http://www.springframework.org/schema/context
	   		http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/mvc 
			http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<import resource="applicationContext-dataAccess.xml" />
	<import resource="applicationContext-jpa.xml" />
	<import resource="spring-integration-context.xml" />
	<import resource="rabbit-context.xml" />

	<context:property-placeholder location="classpath*:META-INF/spring/*.properties" />

	<!-- Activates various annotations to be detected in bean classes -->
	<context:annotation-config />

	<!-- Scans the classpath for annotated components that will be auto-registered 
		as Spring beans. For example @Controller and @Service. Make sure to set the 
		correct base-package -->
	<context:component-scan
		base-package="gov.samhsa.consent2share.si">
	</context:component-scan>
	
	<!-- Consent Getter -->
	<bean id="consentGetterImpl"
		class="gov.samhsa.consent2share.si.ConsentGetterImpl"
		autowire="constructor">
	</bean>
	<bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${database.driverClassName}" />
		<property name="url" value="${database.url}" />
		<property name="username" value="${database.username}" />
		<property name="password" value="${database.password}" />
	</bean>
	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler">
        <property name="nativeJdbcExtractor" ref="nativeJdbcExtractor"/>
    </bean>
    <bean id="nativeJdbcExtractor"
		class="org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor"
		lazy-init="true" />
	<bean id="simpleConsentDtoRowMapper"
		class="gov.samhsa.consent2share.si.SimpleConsentDtoRowMapper"
		scope="singleton" autowire="constructor"/>

	<!-- Configures the annotation-driven Spring MVC Controller programming 
		model. Note that, with Spring 3.0, this tag works in Servlet MVC only! -->
	<mvc:annotation-driven />
	
	<!-- XDS.b -->
	<!-- Common Tools -->
	<bean id="simpleMarshallerImpl"
		class="gov.samhsa.acs.common.tool.SimpleMarshallerImpl"
		scope="prototype" />
	<bean id="documentXmlConverterImpl"
		class="gov.samhsa.acs.common.tool.DocumentXmlConverterImpl"
		scope="prototype"/>	
	<!-- XDS.b: common -->
	<bean id="xdsbErrorFactory"
		class="gov.samhsa.acs.xdsb.common.XdsbErrorFactory"
		scope="prototype">
	</bean>	
	<!-- XDS.b: clients -->
	<bean id="xdsbRepositorybWebServiceClient"
		class="gov.samhsa.acs.xdsb.repository.wsclient.XDSRepositorybWebServiceClient"
		scope="prototype">
		<constructor-arg value="${xdsbRepository}" />
	</bean>
	<!-- XDS.b: adapters -->
	<bean id="retrieveDocumentSetResponseFilter"
		class="gov.samhsa.acs.xdsb.repository.wsclient.adapter.RetrieveDocumentSetResponseFilter"
		scope="prototype" autowire="constructor">
	</bean>
	<bean id="xdsbRepositoryAdapter"
		class="gov.samhsa.acs.xdsb.repository.wsclient.adapter.XdsbRepositoryAdapter"
		scope="prototype" autowire="constructor">
	</bean>
	
</beans>
